{
  "components": {
    "schemas": {
      "Error": {
        "properties": {
          "error": {
            "description": "Error message",
            "type": "string"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "Success": {
        "properties": {
          "message": {
            "description": "Success message",
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "in": "header",
        "name": "X-Api-Key",
        "type": "apiKey"
      },
      "BearerAuth": {
        "bearerFormat": "JWT",
        "description": "Enter the token with the `Bearer: ` prefix, e.g. \"Bearer abcde12345\"",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "contact": {
      "email": "info@base.al",
      "name": "Base Team",
      "url": "https://github.com/BaseTechStack"
    },
    "description": "API documentation generated by Base CLI",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "title": "Base Framework API",
    "version": "1.0.0"
  },
  "openapi": "3.0.3",
  "paths": {
    "/api/auth/forgot-password": {
      "post": {
        "description": "Request to reset password",
        "operationId": "postAuthForgot-Password",
        "parameters": [
          {
            "description": "Forgot Password Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "ForgotPasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "404": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Forgot Password",
        "tags": [
          "Core/Auth"
        ]
      }
    },
    "/api/auth/login": {
      "post": {
        "description": "Login user",
        "operationId": "postAuthLogin",
        "parameters": [
          {
            "description": "Login Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "401": {
            "description": "{object}"
          },
          "404": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Login",
        "tags": [
          "Core/Auth"
        ]
      }
    },
    "/api/auth/logout": {
      "post": {
        "description": "Logout user",
        "operationId": "postAuthLogout",
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "401": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Logout",
        "tags": [
          "Core/Auth"
        ]
      }
    },
    "/api/auth/register": {
      "post": {
        "description": "Register user",
        "operationId": "postAuthRegister",
        "parameters": [
          {
            "description": "Register Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "RegisterRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "409": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Register",
        "tags": [
          "Core/Auth"
        ]
      }
    },
    "/api/auth/reset-password": {
      "post": {
        "description": "Reset user password using token",
        "operationId": "postAuthReset-Password",
        "parameters": [
          {
            "description": "Reset Password Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "ResetPasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "401": {
            "description": "{object}"
          },
          "404": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Reset Password",
        "tags": [
          "Core/Auth"
        ]
      }
    },
    "/api/authorization/check": {
      "post": {
        "description": "Checks if a user has permission to perform an action on a resource",
        "operationId": "postAuthorizationCheck",
        "parameters": [
          {
            "description": "Permission check request",
            "in": "body",
            "name": "checkRequest",
            "required": true,
            "schema": {
              "type": "object{user_id=string,organization_id=string,resource_type=string,action=string,resource_id=string}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Check user permission",
        "tags": [
          "Core/Authorization"
        ]
      }
    },
    "/api/authorization/resource-permissions": {
      "post": {
        "description": "Creates a resource-specific permission override",
        "operationId": "postAuthorizationResource-Permissions",
        "parameters": [
          {
            "description": "Resource permission to create",
            "in": "body",
            "name": "resourcePermission",
            "required": true,
            "schema": {
              "type": "ResourcePermission"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create resource permission",
        "tags": [
          "Core/Authorization"
        ]
      }
    },
    "/api/authorization/resource-permissions/{id}": {
      "delete": {
        "description": "Deletes a resource-specific permission override",
        "operationId": "deleteAuthorizationResource-PermissionsById",
        "parameters": [
          {
            "description": "Resource Permission ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Delete resource permission",
        "tags": [
          "Core/Authorization"
        ]
      }
    },
    "/api/authorization/roles": {
      "get": {
        "description": "Retrieves all roles associated with a specific organization",
        "operationId": "getAuthorizationRoles",
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get all roles for an organization",
        "tags": [
          "Core/Authorization"
        ]
      },
      "post": {
        "description": "Creates a new role with the provided information",
        "operationId": "postAuthorizationRoles",
        "parameters": [
          {
            "description": "Role object to be created",
            "in": "body",
            "name": "role",
            "required": true,
            "schema": {
              "type": "Role"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create a new role",
        "tags": [
          "Core/Authorization"
        ]
      }
    },
    "/api/authorization/roles/{id}": {
      "delete": {
        "description": "Deletes a role by its ID",
        "operationId": "deleteAuthorizationRolesById",
        "parameters": [
          {
            "description": "Role ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "403": {
            "description": "{object}"
          },
          "404": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Delete a role",
        "tags": [
          "Core/Authorization"
        ]
      },
      "get": {
        "description": "Retrieves a specific role by its ID",
        "operationId": "getAuthorizationRolesById",
        "parameters": [
          {
            "description": "Role ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "404": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get role by ID",
        "tags": [
          "Core/Authorization"
        ]
      },
      "put": {
        "description": "Updates an existing role with the provided information",
        "operationId": "putAuthorizationRolesById",
        "parameters": [
          {
            "description": "Role ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Updated role object",
            "in": "body",
            "name": "role",
            "required": true,
            "schema": {
              "type": "Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "403": {
            "description": "{object}"
          },
          "404": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update a role",
        "tags": [
          "Core/Authorization"
        ]
      }
    },
    "/api/authorization/roles/{id}/permissions": {
      "get": {
        "description": "Retrieves all permissions associated with a specific role",
        "operationId": "getAuthorizationRolesByIdPermissions",
        "parameters": [
          {
            "description": "Role ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "404": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get permissions for a role",
        "tags": [
          "Core/Authorization"
        ]
      },
      "post": {
        "description": "Assigns a permission to a role",
        "operationId": "postAuthorizationRolesByIdPermissions",
        "parameters": [
          {
            "description": "Role ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Permission ID to assign",
            "in": "body",
            "name": "assignRequest",
            "required": true,
            "schema": {
              "type": "object{permission_id=string}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "404": {
            "description": "{object}"
          },
          "409": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Assign permission to role",
        "tags": [
          "Core/Authorization"
        ]
      }
    },
    "/api/authorization/roles/{id}/permissions/{permissionId}": {
      "delete": {
        "description": "Removes a permission from a role",
        "operationId": "deleteAuthorizationRolesByIdPermissionsByPermissionId",
        "parameters": [
          {
            "description": "Role ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Permission ID",
            "in": "path",
            "name": "permissionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "404": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Revoke permission from role",
        "tags": [
          "Core/Authorization"
        ]
      }
    },
    "/api/countries": {
      "get": {
        "description": "Get a list of countries",
        "operationId": "getCountries",
        "parameters": [
          {
            "description": "Page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "description": "Sort field (id, created_at, updated_at,name,flag,email,)",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort order (asc, desc)",
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "List countries",
        "tags": [
          "App/Country"
        ]
      },
      "post": {
        "description": "Create a new Country with the input payload",
        "operationId": "postCountries",
        "parameters": [
          {
            "description": "Create Country request",
            "in": "body",
            "name": "countries",
            "required": true,
            "schema": {
              "type": "models.CreateCountryRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "Create a new Country",
        "tags": [
          "App/Country"
        ]
      }
    },
    "/api/countries/all": {
      "get": {
        "description": "Get a simplified list of all countries with id and name only (for dropdowns/select boxes)",
        "operationId": "getCountriesAll",
        "responses": {
          "200": {
            "description": "{array}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "List all countries for select options",
        "tags": [
          "App/Country"
        ]
      }
    },
    "/api/countries/{id}": {
      "delete": {
        "description": "Delete a Country by its id",
        "operationId": "deleteCountriesById",
        "parameters": [
          {
            "description": "Country id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "int"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "Delete a Country",
        "tags": [
          "App/Country"
        ]
      },
      "get": {
        "description": "Get a Country by its id",
        "operationId": "getCountriesById",
        "parameters": [
          {
            "description": "Country id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "int"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "404": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "Get a Country",
        "tags": [
          "App/Country"
        ]
      },
      "put": {
        "description": "Update a Country by its id",
        "operationId": "putCountriesById",
        "parameters": [
          {
            "description": "Country id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "int"
            }
          },
          {
            "description": "Update Country request",
            "in": "body",
            "name": "countries",
            "required": true,
            "schema": {
              "type": "models.UpdateCountryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "404": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "Update a Country",
        "tags": [
          "App/Country"
        ]
      }
    },
    "/api/countries/{id}/flag": {
      "delete": {
        "description": "Remove the file from the Country's flag field",
        "operationId": "deleteCountriesByIdFlag",
        "parameters": [
          {
            "description": "Country id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "int"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "Remove flag from Country",
        "tags": [
          "App/Country"
        ]
      },
      "post": {
        "description": "Upload a file for the Country's flag field",
        "operationId": "postCountriesByIdFlag",
        "parameters": [
          {
            "description": "Country id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "int"
            }
          },
          {
            "description": "Flag file",
            "in": "formData",
            "name": "file",
            "required": true,
            "schema": {
              "type": "file"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "Upload flag for Country",
        "tags": [
          "App/Country"
        ]
      }
    },
    "/api/customers": {
      "get": {
        "description": "Get a list of customers",
        "operationId": "getCustomers",
        "parameters": [
          {
            "description": "Page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "description": "Sort field (id, created_at, updated_at,name,flag,email,)",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort order (asc, desc)",
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "List customers",
        "tags": [
          "App/Customer"
        ]
      },
      "post": {
        "description": "Create a new Customer with the input payload",
        "operationId": "postCustomers",
        "parameters": [
          {
            "description": "Create Customer request",
            "in": "body",
            "name": "customers",
            "required": true,
            "schema": {
              "type": "models.CreateCustomerRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "Create a new Customer",
        "tags": [
          "App/Customer"
        ]
      }
    },
    "/api/customers/all": {
      "get": {
        "description": "Get a simplified list of all customers with id and name only (for dropdowns/select boxes)",
        "operationId": "getCustomersAll",
        "responses": {
          "200": {
            "description": "{array}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "List all customers for select options",
        "tags": [
          "App/Customer"
        ]
      }
    },
    "/api/customers/{id}": {
      "delete": {
        "description": "Delete a Customer by its id",
        "operationId": "deleteCustomersById",
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "int"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "Delete a Customer",
        "tags": [
          "App/Customer"
        ]
      },
      "get": {
        "description": "Get a Customer by its id",
        "operationId": "getCustomersById",
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "int"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "404": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "Get a Customer",
        "tags": [
          "App/Customer"
        ]
      },
      "put": {
        "description": "Update a Customer by its id",
        "operationId": "putCustomersById",
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "int"
            }
          },
          {
            "description": "Update Customer request",
            "in": "body",
            "name": "customers",
            "required": true,
            "schema": {
              "type": "models.UpdateCustomerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "404": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "Update a Customer",
        "tags": [
          "App/Customer"
        ]
      }
    },
    "/api/customers/{id}/flag": {
      "delete": {
        "description": "Remove the file from the Customer's flag field",
        "operationId": "deleteCustomersByIdFlag",
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "int"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "Remove flag from Customer",
        "tags": [
          "App/Customer"
        ]
      },
      "post": {
        "description": "Upload a file for the Customer's flag field",
        "operationId": "postCustomersByIdFlag",
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "int"
            }
          },
          {
            "description": "Flag file",
            "in": "formData",
            "name": "file",
            "required": true,
            "schema": {
              "type": "file"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "Upload flag for Customer",
        "tags": [
          "App/Customer"
        ]
      }
    },
    "/api/disbursements": {
      "get": {
        "description": "Get a list of disbursements",
        "operationId": "getDisbursements",
        "parameters": [
          {
            "description": "Page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "description": "Sort field (id, created_at, updated_at,amount,description,)",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort order (asc, desc)",
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "List disbursements",
        "tags": [
          "App/Disbursement"
        ]
      },
      "post": {
        "description": "Create a new Disbursement with the input payload",
        "operationId": "postDisbursements",
        "parameters": [
          {
            "description": "Create Disbursement request",
            "in": "body",
            "name": "disbursements",
            "required": true,
            "schema": {
              "type": "models.CreateDisbursementRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Create a new Disbursement",
        "tags": [
          "App/Disbursement"
        ]
      }
    },
    "/api/disbursements/all": {
      "get": {
        "description": "Get a simplified list of all disbursements with id and name only (for dropdowns/select boxes)",
        "operationId": "getDisbursementsAll",
        "responses": {
          "200": {
            "description": "{array}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "List all disbursements for select options",
        "tags": [
          "App/Disbursement"
        ]
      }
    },
    "/api/disbursements/{id}": {
      "delete": {
        "description": "Delete a Disbursement by its id",
        "operationId": "deleteDisbursementsById",
        "parameters": [
          {
            "description": "Disbursement id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "int"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Delete a Disbursement",
        "tags": [
          "App/Disbursement"
        ]
      },
      "get": {
        "description": "Get a Disbursement by its id",
        "operationId": "getDisbursementsById",
        "parameters": [
          {
            "description": "Disbursement id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "int"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "404": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Get a Disbursement",
        "tags": [
          "App/Disbursement"
        ]
      },
      "put": {
        "description": "Update a Disbursement by its id",
        "operationId": "putDisbursementsById",
        "parameters": [
          {
            "description": "Disbursement id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "int"
            }
          },
          {
            "description": "Update Disbursement request",
            "in": "body",
            "name": "disbursements",
            "required": true,
            "schema": {
              "type": "models.UpdateDisbursementRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "404": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Update a Disbursement",
        "tags": [
          "App/Disbursement"
        ]
      }
    },
    "/api/media": {
      "get": {
        "description": "Get a paginated list of media items",
        "operationId": "getMedia",
        "parameters": [
          {
            "description": "Page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "description": "Items per page",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "int"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "List media items",
        "tags": [
          "Core/Media"
        ]
      },
      "post": {
        "description": "Create a new media item with optional file upload",
        "operationId": "postMedia",
        "parameters": [
          {
            "description": "Media name",
            "in": "formData",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Media type",
            "in": "formData",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Media description",
            "in": "formData",
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Media file",
            "in": "formData",
            "name": "file",
            "required": false,
            "schema": {
              "type": "file"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "Create a new media item",
        "tags": [
          "Core/Media"
        ]
      }
    },
    "/api/media/all": {
      "get": {
        "description": "Get an unpaginated list of all media items",
        "operationId": "getMediaAll",
        "responses": {
          "200": {
            "description": "{array}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "List all media items",
        "tags": [
          "Core/Media"
        ]
      }
    },
    "/api/media/{id}": {
      "delete": {
        "description": "Delete a media item and its associated file",
        "operationId": "deleteMediaById",
        "parameters": [
          {
            "description": "Media ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "int"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "Delete a media item",
        "tags": [
          "Core/Media"
        ]
      },
      "get": {
        "description": "Get a media item by ID",
        "operationId": "getMediaById",
        "parameters": [
          {
            "description": "Media ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "int"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "Get a media item",
        "tags": [
          "Core/Media"
        ]
      },
      "put": {
        "description": "Update a media item's details and optionally its file",
        "operationId": "putMediaById",
        "parameters": [
          {
            "description": "Media ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "int"
            }
          },
          {
            "description": "Media name",
            "in": "formData",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Media type",
            "in": "formData",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Media description",
            "in": "formData",
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Media file",
            "in": "formData",
            "name": "file",
            "required": false,
            "schema": {
              "type": "file"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "Update a media item",
        "tags": [
          "Core/Media"
        ]
      }
    },
    "/api/media/{id}/file": {
      "delete": {
        "description": "Remove the file attached to a media item",
        "operationId": "deleteMediaByIdFile",
        "parameters": [
          {
            "description": "Media ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "int"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "Remove media file",
        "tags": [
          "Core/Media"
        ]
      },
      "put": {
        "description": "Update the file attached to a media item",
        "operationId": "putMediaByIdFile",
        "parameters": [
          {
            "description": "Media ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "int"
            }
          },
          {
            "description": "Media file",
            "in": "formData",
            "name": "file",
            "required": true,
            "schema": {
              "type": "file"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "Update media file",
        "tags": [
          "Core/Media"
        ]
      }
    },
    "/api/oauth/apple/callback": {
      "post": {
        "description": "Handle the OAuth callback from Apple",
        "operationId": "postOauthAppleCallback",
        "parameters": [
          {
            "description": "Apple ID Token",
            "in": "body",
            "name": "idToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "401": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Apple OAuth callback",
        "tags": [
          "Core/OAuth"
        ]
      }
    },
    "/api/oauth/facebook/callback": {
      "post": {
        "description": "Handle the OAuth callback from Facebook",
        "operationId": "postOauthFacebookCallback",
        "parameters": [
          {
            "description": "Facebook Access Token",
            "in": "body",
            "name": "accessToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "401": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Facebook OAuth callback",
        "tags": [
          "Core/OAuth"
        ]
      }
    },
    "/api/oauth/google/callback": {
      "post": {
        "description": "Handle the OAuth callback from Google",
        "operationId": "postOauthGoogleCallback",
        "parameters": [
          {
            "description": "Google ID Token",
            "in": "body",
            "name": "idToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "401": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Google OAuth callback",
        "tags": [
          "Core/OAuth"
        ]
      }
    },
    "/api/profile": {
      "get": {
        "description": "Get profile by Bearer Token",
        "operationId": "getProfile",
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "404": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "Get profile from Authenticated User Token",
        "tags": [
          "Core/Profile"
        ]
      },
      "put": {
        "description": "Update profile by Bearer Token",
        "operationId": "putProfile",
        "parameters": [
          {
            "description": "Update Request",
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "UpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "404": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "Update profile from Authenticated User Token",
        "tags": [
          "Core/Profile"
        ]
      }
    },
    "/api/profile/avatar": {
      "put": {
        "description": "Update profile avatar by Bearer Token",
        "operationId": "putProfileAvatar",
        "parameters": [
          {
            "description": "Avatar file",
            "in": "formData",
            "name": "avatar",
            "required": true,
            "schema": {
              "type": "file"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "404": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "Update profile avatar from Authenticated User Token",
        "tags": [
          "Core/Profile"
        ]
      }
    },
    "/api/profile/password": {
      "put": {
        "description": "Update profile password by Bearer Token",
        "operationId": "putProfilePassword",
        "parameters": [
          {
            "description": "Update Password Request",
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "UpdatePasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "404": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "summary": "Update profile password from Authenticated User Token",
        "tags": [
          "Core/Profile"
        ]
      }
    },
    "/api/translations": {
      "get": {
        "description": "Get a paginated list of translations with optional filtering",
        "operationId": "getTranslations",
        "parameters": [
          {
            "description": "Page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "description": "Filter by model name",
            "in": "query",
            "name": "model",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by model ID",
            "in": "query",
            "name": "model_id",
            "required": false,
            "schema": {
              "type": "int"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List translations",
        "tags": [
          "Core/Translations"
        ]
      },
      "post": {
        "description": "Create a new translation",
        "operationId": "postTranslations",
        "parameters": [
          {
            "description": "Translation data",
            "in": "body",
            "name": "translation",
            "required": true,
            "schema": {
              "type": "\ttranslation.CreateTranslationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create translation",
        "tags": [
          "Core/Translations"
        ]
      }
    },
    "/api/translations/bulk": {
      "post": {
        "description": "Update multiple translations for a model at once",
        "operationId": "postTranslationsBulk",
        "parameters": [
          {
            "description": "Bulk translation data",
            "in": "body",
            "name": "bulk",
            "required": true,
            "schema": {
              "type": "translation.BulkTranslationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Bulk update translations",
        "tags": [
          "Core/Translations"
        ]
      }
    },
    "/api/translations/by-id/{id}": {
      "delete": {
        "description": "Delete a translation by ID",
        "operationId": "deleteTranslationsBy-IdById",
        "parameters": [
          {
            "description": "Translation ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "int"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "{object}"
          },
          "404": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Delete translation",
        "tags": [
          "Core/Translations"
        ]
      },
      "get": {
        "description": "Get a single translation by its ID",
        "operationId": "getTranslationsBy-IdById",
        "parameters": [
          {
            "description": "Translation ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "int"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "404": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get translation by ID",
        "tags": [
          "Core/Translations"
        ]
      },
      "put": {
        "description": "Update an existing translation",
        "operationId": "putTranslationsBy-IdById",
        "parameters": [
          {
            "description": "Translation ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "int"
            }
          },
          {
            "description": "Translation data",
            "in": "body",
            "name": "translation",
            "required": true,
            "schema": {
              "type": "translation.UpdateTranslationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "404": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update translation",
        "tags": [
          "Core/Translations"
        ]
      }
    },
    "/api/translations/languages": {
      "get": {
        "description": "Get a list of all languages that have translations in the system",
        "operationId": "getTranslationsLanguages",
        "responses": {
          "200": {
            "description": "{array}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get supported languages",
        "tags": [
          "Core/Translations"
        ]
      }
    },
    "/api/translations/models/{model}/{model_id}": {
      "get": {
        "description": "Get all translations for a specific model and model ID",
        "operationId": "getTranslationsModelsByModelByModel_id",
        "parameters": [
          {
            "description": "Model name",
            "in": "path",
            "name": "model",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Model ID",
            "in": "path",
            "name": "model_id",
            "required": true,
            "schema": {
              "type": "int"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get translations for model",
        "tags": [
          "Core/Translations"
        ]
      }
    },
    "/api/translations/models/{model}/{model_id}/{language}": {
      "get": {
        "description": "Get translations for a specific model, model ID, and language",
        "operationId": "getTranslationsModelsByModelByModel_idByLanguage",
        "parameters": [
          {
            "description": "Model name",
            "in": "path",
            "name": "model",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Model ID",
            "in": "path",
            "name": "model_id",
            "required": true,
            "schema": {
              "type": "int"
            }
          },
          {
            "description": "Language code",
            "in": "path",
            "name": "language",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{object}"
          },
          "400": {
            "description": "{object}"
          },
          "500": {
            "description": "{object}"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get translations for model and language",
        "tags": [
          "Core/Translations"
        ]
      }
    }
  },
  "servers": [
    {
      "description": "Base Framework API Server",
      "url": "http://localhost:8080"
    }
  ]
}