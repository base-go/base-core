package swagger

// Auto-generated swagger registration code
// Generated by: base docs command

func init() {
	// This function will be called when the swagger package is imported
	// It auto-registers all the documented routes
}

// RegisterAllRoutes registers all auto-discovered routes
func RegisterAllRoutes() {
	AutoRegisterRouteDetailed("POST", "/api/auth/register", "Register", "Register user", []string{"Core/Auth"},
		[]Parameter{
		{Name: "body", In: "body", Description: "Register Request", Required: true, Schema: Schema{Type: "RegisterRequest"}},
	}, map[string]Response{
		"201": {Description: "{object}"},
		"400": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("POST", "/api/auth/login", "Login", "Login user", []string{"Core/Auth"},
		[]Parameter{
		{Name: "body", In: "body", Description: "Login Request", Required: true, Schema: Schema{Type: "LoginRequest"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"400": {Description: "{object}"},
		"401": {Description: "{object}"},
		"404": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("POST", "/api/auth/logout", "Logout", "Logout user", []string{"Core/Auth"},
		nil, map[string]Response{
		"200": {Description: "{object}"},
		"400": {Description: "{object}"},
		"401": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("POST", "/api/auth/forgot-password", "Forgot Password", "Request to reset password", []string{"Core/Auth"},
		[]Parameter{
		{Name: "body", In: "body", Description: "Forgot Password Request", Required: true, Schema: Schema{Type: "ForgotPasswordRequest"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"400": {Description: "{object}"},
		"404": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("POST", "/api/auth/reset-password", "Reset Password", "Reset user password using token", []string{"Core/Auth"},
		[]Parameter{
		{Name: "body", In: "body", Description: "Reset Password Request", Required: true, Schema: Schema{Type: "ResetPasswordRequest"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"400": {Description: "{object}"},
		"401": {Description: "{object}"},
		"404": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("GET", "/api/authorization/roles", "Get all roles for an organization", "Retrieves all roles associated with a specific organization", []string{"Core/Authorization"},
		nil, map[string]Response{
		"200": {Description: "{object}"},
		"400": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"BearerAuth": {}}, {"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("GET", "/api/authorization/roles/{id}", "Get role by ID", "Retrieves a specific role by its ID", []string{"Core/Authorization"},
		[]Parameter{
		{Name: "id", In: "path", Description: "Role ID", Required: true, Schema: Schema{Type: "string"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"404": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"BearerAuth": {}}, {"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("POST", "/api/authorization/roles", "Create a new role", "Creates a new role with the provided information", []string{"Core/Authorization"},
		[]Parameter{
		{Name: "role", In: "body", Description: "Role object to be created", Required: true, Schema: Schema{Type: "Role"}},
	}, map[string]Response{
		"201": {Description: "{object}"},
		"400": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"BearerAuth": {}}, {"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("PUT", "/api/authorization/roles/{id}", "Update a role", "Updates an existing role with the provided information", []string{"Core/Authorization"},
		[]Parameter{
		{Name: "id", In: "path", Description: "Role ID", Required: true, Schema: Schema{Type: "string"}},
		{Name: "role", In: "body", Description: "Updated role object", Required: true, Schema: Schema{Type: "Role"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"400": {Description: "{object}"},
		"403": {Description: "{object}"},
		"404": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"BearerAuth": {}}, {"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("DELETE", "/api/authorization/roles/{id}", "Delete a role", "Deletes a role by its ID", []string{"Core/Authorization"},
		[]Parameter{
		{Name: "id", In: "path", Description: "Role ID", Required: true, Schema: Schema{Type: "string"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"403": {Description: "{object}"},
		"404": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"BearerAuth": {}}, {"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("GET", "/api/authorization/roles/{id}/permissions", "Get permissions for a role", "Retrieves all permissions associated with a specific role", []string{"Core/Authorization"},
		[]Parameter{
		{Name: "id", In: "path", Description: "Role ID", Required: true, Schema: Schema{Type: "string"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"404": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"BearerAuth": {}}, {"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("POST", "/api/authorization/roles/{id}/permissions", "Assign permission to role", "Assigns a permission to a role", []string{"Core/Authorization"},
		[]Parameter{
		{Name: "id", In: "path", Description: "Role ID", Required: true, Schema: Schema{Type: "string"}},
		{Name: "assignRequest", In: "body", Description: "Permission ID to assign", Required: true, Schema: Schema{Type: "object{permission_id=string}"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"400": {Description: "{object}"},
		"404": {Description: "{object}"},
		"409": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"BearerAuth": {}}, {"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("DELETE", "/api/authorization/roles/{id}/permissions/{permissionId}", "Revoke permission from role", "Removes a permission from a role", []string{"Core/Authorization"},
		[]Parameter{
		{Name: "id", In: "path", Description: "Role ID", Required: true, Schema: Schema{Type: "string"}},
		{Name: "permissionId", In: "path", Description: "Permission ID", Required: true, Schema: Schema{Type: "string"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"404": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"BearerAuth": {}}, {"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("POST", "/api/authorization/resource-permissions", "Create resource permission", "Creates a resource-specific permission override", []string{"Core/Authorization"},
		[]Parameter{
		{Name: "resourcePermission", In: "body", Description: "Resource permission to create", Required: true, Schema: Schema{Type: "ResourcePermission"}},
	}, map[string]Response{
		"201": {Description: "{object}"},
		"400": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"BearerAuth": {}}, {"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("DELETE", "/api/authorization/resource-permissions/{id}", "Delete resource permission", "Deletes a resource-specific permission override", []string{"Core/Authorization"},
		[]Parameter{
		{Name: "id", In: "path", Description: "Resource Permission ID", Required: true, Schema: Schema{Type: "string"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"BearerAuth": {}}, {"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("POST", "/api/authorization/check", "Check user permission", "Checks if a user has permission to perform an action on a resource", []string{"Core/Authorization"},
		[]Parameter{
		{Name: "checkRequest", In: "body", Description: "Permission check request", Required: true, Schema: Schema{Type: "object{user_id=string,organization_id=string,resource_type=string,action=string,resource_id=string}"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"400": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"BearerAuth": {}}, {"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("POST", "/api/media", "Create a new media item", "Create a new media item with optional file upload", []string{"Core/Media"},
		[]Parameter{
		{Name: "name", In: "formData", Description: "Media name", Required: true, Schema: Schema{Type: "string"}},
		{Name: "type", In: "formData", Description: "Media type", Required: true, Schema: Schema{Type: "string"}},
		{Name: "description", In: "formData", Description: "Media description", Required: false, Schema: Schema{Type: "string"}},
		{Name: "file", In: "formData", Description: "Media file", Required: false, Schema: Schema{Type: "file"}},
	}, map[string]Response{
		"201": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, {"BearerAuth": {}}, })
	AutoRegisterRouteDetailed("PUT", "/api/media/{id}/file", "Update media file", "Update the file attached to a media item", []string{"Core/Media"},
		[]Parameter{
		{Name: "id", In: "path", Description: "Media ID", Required: true, Schema: Schema{Type: "int"}},
		{Name: "file", In: "formData", Description: "Media file", Required: true, Schema: Schema{Type: "file"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, {"BearerAuth": {}}, })
	AutoRegisterRouteDetailed("DELETE", "/api/media/{id}/file", "Remove media file", "Remove the file attached to a media item", []string{"Core/Media"},
		[]Parameter{
		{Name: "id", In: "path", Description: "Media ID", Required: true, Schema: Schema{Type: "int"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, {"BearerAuth": {}}, })
	AutoRegisterRouteDetailed("PUT", "/api/media/{id}", "Update a media item", "Update a media item's details and optionally its file", []string{"Core/Media"},
		[]Parameter{
		{Name: "id", In: "path", Description: "Media ID", Required: true, Schema: Schema{Type: "int"}},
		{Name: "name", In: "formData", Description: "Media name", Required: false, Schema: Schema{Type: "string"}},
		{Name: "type", In: "formData", Description: "Media type", Required: false, Schema: Schema{Type: "string"}},
		{Name: "description", In: "formData", Description: "Media description", Required: false, Schema: Schema{Type: "string"}},
		{Name: "file", In: "formData", Description: "Media file", Required: false, Schema: Schema{Type: "file"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, {"BearerAuth": {}}, })
	AutoRegisterRouteDetailed("DELETE", "/api/media/{id}", "Delete a media item", "Delete a media item and its associated file", []string{"Core/Media"},
		[]Parameter{
		{Name: "id", In: "path", Description: "Media ID", Required: true, Schema: Schema{Type: "int"}},
	}, map[string]Response{
		"204": {Description: "No Content"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, {"BearerAuth": {}}, })
	AutoRegisterRouteDetailed("GET", "/api/media/{id}", "Get a media item", "Get a media item by ID", []string{"Core/Media"},
		[]Parameter{
		{Name: "id", In: "path", Description: "Media ID", Required: true, Schema: Schema{Type: "int"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, {"BearerAuth": {}}, })
	AutoRegisterRouteDetailed("GET", "/api/media", "List media items", "Get a paginated list of media items", []string{"Core/Media"},
		[]Parameter{
		{Name: "page", In: "query", Description: "Page number", Required: false, Schema: Schema{Type: "int"}},
		{Name: "limit", In: "query", Description: "Items per page", Required: false, Schema: Schema{Type: "int"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, {"BearerAuth": {}}, })
	AutoRegisterRouteDetailed("GET", "/api/media/all", "List all media items", "Get an unpaginated list of all media items", []string{"Core/Media"},
		nil, map[string]Response{
		"200": {Description: "{array}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, {"BearerAuth": {}}, })
	AutoRegisterRouteDetailed("POST", "/api/oauth/google/callback", "Google OAuth callback", "Handle the OAuth callback from Google", []string{"Core/OAuth"},
		[]Parameter{
		{Name: "idToken", In: "body", Description: "Google ID Token", Required: true, Schema: Schema{Type: "string"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"400": {Description: "{object}"},
		"401": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("POST", "/api/oauth/facebook/callback", "Facebook OAuth callback", "Handle the OAuth callback from Facebook", []string{"Core/OAuth"},
		[]Parameter{
		{Name: "accessToken", In: "body", Description: "Facebook Access Token", Required: true, Schema: Schema{Type: "string"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"400": {Description: "{object}"},
		"401": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("POST", "/api/oauth/apple/callback", "Apple OAuth callback", "Handle the OAuth callback from Apple", []string{"Core/OAuth"},
		[]Parameter{
		{Name: "idToken", In: "body", Description: "Apple ID Token", Required: true, Schema: Schema{Type: "string"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"400": {Description: "{object}"},
		"401": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("GET", "/api/profile", "Get profile from Authenticated User Token", "Get profile by Bearer Token", []string{"Core/Profile"},
		nil, map[string]Response{
		"200": {Description: "{object}"},
		"400": {Description: "{object}"},
		"404": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, {"BearerAuth": {}}, })
	AutoRegisterRouteDetailed("PUT", "/api/profile", "Update profile from Authenticated User Token", "Update profile by Bearer Token", []string{"Core/Profile"},
		[]Parameter{
		{Name: "input", In: "body", Description: "Update Request", Required: true, Schema: Schema{Type: "UpdateRequest"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"400": {Description: "{object}"},
		"404": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, {"BearerAuth": {}}, })
	AutoRegisterRouteDetailed("PUT", "/api/profile/avatar", "Update profile avatar from Authenticated User Token", "Update profile avatar by Bearer Token", []string{"Core/Profile"},
		[]Parameter{
		{Name: "avatar", In: "formData", Description: "Avatar file", Required: true, Schema: Schema{Type: "file"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"400": {Description: "{object}"},
		"404": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, {"BearerAuth": {}}, })
	AutoRegisterRouteDetailed("PUT", "/api/profile/password", "Update profile password from Authenticated User Token", "Update profile password by Bearer Token", []string{"Core/Profile"},
		[]Parameter{
		{Name: "input", In: "body", Description: "Update Password Request", Required: true, Schema: Schema{Type: "UpdatePasswordRequest"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"400": {Description: "{object}"},
		"404": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, {"BearerAuth": {}}, })
	AutoRegisterRouteDetailed("GET", "/api/translations", "List translations", "Get a paginated list of translations with optional filtering", []string{"Core/Translations"},
		[]Parameter{
		{Name: "page", In: "query", Description: "Page number", Required: false, Schema: Schema{Type: "int"}},
		{Name: "limit", In: "query", Description: "Number of items per page", Required: false, Schema: Schema{Type: "int"}},
		{Name: "model", In: "query", Description: "Filter by model name", Required: false, Schema: Schema{Type: "string"}},
		{Name: "model_id", In: "query", Description: "Filter by model ID", Required: false, Schema: Schema{Type: "int"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("GET", "/api/translations/{id}", "Get translation by ID", "Get a single translation by its ID", []string{"Core/Translations"},
		[]Parameter{
		{Name: "id", In: "path", Description: "Translation ID", Required: true, Schema: Schema{Type: "int"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"400": {Description: "{object}"},
		"404": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("POST", "/api/translations", "Create translation", "Create a new translation", []string{"Core/Translations"},
		[]Parameter{
		{Name: "translation", In: "body", Description: "Translation data", Required: true, Schema: Schema{Type: "	translation.CreateTranslationRequest"}},
	}, map[string]Response{
		"201": {Description: "{object}"},
		"400": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("PUT", "/api/translations/{id}", "Update translation", "Update an existing translation", []string{"Core/Translations"},
		[]Parameter{
		{Name: "id", In: "path", Description: "Translation ID", Required: true, Schema: Schema{Type: "int"}},
		{Name: "translation", In: "body", Description: "Translation data", Required: true, Schema: Schema{Type: "translation.UpdateTranslationRequest"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"400": {Description: "{object}"},
		"404": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("DELETE", "/api/translations/{id}", "Delete translation", "Delete a translation by ID", []string{"Core/Translations"},
		[]Parameter{
		{Name: "id", In: "path", Description: "Translation ID", Required: true, Schema: Schema{Type: "int"}},
	}, map[string]Response{
		"400": {Description: "{object}"},
		"404": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("POST", "/api/translations/bulk", "Bulk update translations", "Update multiple translations for a model at once", []string{"Core/Translations"},
		[]Parameter{
		{Name: "bulk", In: "body", Description: "Bulk translation data", Required: true, Schema: Schema{Type: "translation.BulkTranslationRequest"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"400": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("GET", "/api/translations/models/{model}/{model_id}", "Get translations for model", "Get all translations for a specific model and model ID", []string{"Core/Translations"},
		[]Parameter{
		{Name: "model", In: "path", Description: "Model name", Required: true, Schema: Schema{Type: "string"}},
		{Name: "model_id", In: "path", Description: "Model ID", Required: true, Schema: Schema{Type: "int"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"400": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("GET", "/api/translations/models/{model}/{model_id}/{language}", "Get translations for model and language", "Get translations for a specific model, model ID, and language", []string{"Core/Translations"},
		[]Parameter{
		{Name: "model", In: "path", Description: "Model name", Required: true, Schema: Schema{Type: "string"}},
		{Name: "model_id", In: "path", Description: "Model ID", Required: true, Schema: Schema{Type: "int"}},
		{Name: "language", In: "path", Description: "Language code", Required: true, Schema: Schema{Type: "string"}},
	}, map[string]Response{
		"200": {Description: "{object}"},
		"400": {Description: "{object}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, })
	AutoRegisterRouteDetailed("GET", "/api/translations/languages", "Get supported languages", "Get a list of all languages that have translations in the system", []string{"Core/Translations"},
		nil, map[string]Response{
		"200": {Description: "{array}"},
		"500": {Description: "{object}"},
	}, []map[string][]string{{"ApiKeyAuth": {}}, })
}
